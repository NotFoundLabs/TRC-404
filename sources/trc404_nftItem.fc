#include "./utils/stdlib.fc";
#include "./utils/string.fc";
#include "./utils/chain.fc";
#include "./utils/sendMessage.fc";
#include "./message/common_message.fc";
#include "./message/wallet_message.fc";
#include "./message/nftItem_message.fc";
#include "./init/wallet_init.fc";
#include "./message/nftCollection_message.fc";

int min_tons_for_storage()                    asm "166000000 PUSHINT"; 
int min_request_transfer_one_ft_and_nft_gas() asm "150000000 PUSHINT";  
int deploy_gas_consumption()                  asm "15800000 PUSHINT";   


(int, int, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (nft_item_index, collection_address ) = (ds~load_uint(64), ds~load_msg_addr());

    if (ds.slice_bits() > 0) {
      ( slice owner_address, cell nft_content) = (ds~load_msg_addr(), ds~load_ref());     
      return (-1, nft_item_index, collection_address , owner_address, nft_content);
    } else {  
      return (0, nft_item_index, collection_address,  null(),null()); 
    }
}

() store_data(int nft_item_index, slice collection_address,slice owner_address, cell nft_content) impure {
    set_data(begin_cell()
            .store_uint(nft_item_index, 64)   ;; nft_item_index
            .store_slice(collection_address)  ;; collection address  
            .store_slice(owner_address)       ;; owner address
            .store_ref(nft_content)           ;; nft content
            .end_cell()
    );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6) 
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }
    send_raw_message(msg.end_cell(), send_mode);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
      return ();
    }
    var ctx = var (flags,sender_address,fwd_fee) = load_in_msg_full(in_msg_full);
    if (flags & 1) {
      return ();
    }
    int op = in_msg_body~load_uint(32);

    ;;********begin to handle message
    (int init?, int index, slice collection_address,slice owner_address,cell nft_content) = load_data();

    if ( op == op::deployNftItem()) {
      if ( ~ init? ) {  
       (int query_id,int nft_represent_ft_amount,slice new_owner_address,slice new_owner_trc404_wallet_address,slice response_address) = load_DeployNftItemMsg(in_msg_body);

       throw_unless(407, equal_slices(collection_address, sender_address));

       int level = rand(100);
       cell new_nft_content = begin_cell().store_uint(level,64).end_cell(); 

       msg_value = msg_value - deploy_gas_consumption();
       sendMsg(bounce::true(),sendMode::NONE(),new_owner_trc404_wallet_address, msg_value,addOneFtAndNftMsg(query_id,index,nft_represent_ft_amount,new_owner_address,response_address));

       store_data(index, collection_address, new_owner_address, new_nft_content);
      }  
      return ();
     } 

   if ( op == op::burn_nft_item()) {
      var (query_id,from,from_trc404_wallet, response_address) = load_BurnNftItemMsg(in_msg_body);

      throw_unless(406, equal_slices(collection_address, sender_address));
      sendMsg(bounce::false(),sendMode::CARRY_ALL_REMAINING_BALANCE() + sendMode::DESTROY_ACCOUNT_IF_ZERO(),from_trc404_wallet,0,cbBurnNftMsg(query_id, index, response_address)); 
      return();
   }
   
    if (op == op::transfer_nft_item()) {    
      var (query_id,new_owner, response_address,custom_payload, forward_amount, forward_payload) = load_TransferNftItemMsg(in_msg_body);

      throw_unless(405, equal_slices(owner_address, sender_address));    

      int rest_amount = msg_value  -  forward_amount - min_tons_for_storage() - fwd_fee  - fwd_fee;
      throw_unless(402, rest_amount >= 0); ;

      if ( forward_amount > 0 ) {
         send_msg(new_owner, forward_amount, op::ownership_assigned(), query_id,
                  begin_cell().store_slice(owner_address).store_slice(forward_payload), 1);  
      }
      
      sendMsg(bounce::true(),sendMode::NONE(),collection_address,min_request_transfer_one_ft_and_nft_gas(),requestTransferOneFtAndNftMsg(query_id,index,owner_address,new_owner,response_address));

      int need_response = response_address.preload_uint(2) != 0; ;; if NOT addr_none: 00
       if (need_response) {
        force_chain(response_address);
        send_msg(response_address, rest_amount , op::excesses(), query_id, null(), 1); 
      }
      
      store_data(index, collection_address, new_owner, nft_content);
      return ();
    }

    if (op == op::get_static_data()) {
      int query_id = load_GetStaticDataMsg(in_msg_body);
      sendMsg(bounce::false(),sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),
              sender_address,0,
              reportStaticDataMsg(query_id,index,collection_address));
      return ();
    }

    throw(0xffff);
}


(int, int, slice, slice, cell) get_nft_data() method_id {
  (int init?, int index, slice collection_address, slice owner_address,cell content) = load_data();
  return (init?, index,collection_address,owner_address,content); 
}
