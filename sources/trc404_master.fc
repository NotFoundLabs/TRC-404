#include "./utils/stdlib.fc";
#include "./message/common_message.fc";
#include "./utils/sendMessage.fc";
#include "./message/master_message.fc";
#include "./message/wallet_message.fc";
#include "./message/nftCollection_message.fc";
#include "./init/wallet_init.fc";
#include "./utils/string.fc";

int max_supply()     asm "100000000000000 PUSHINT"; ;; max supply of Jetton and NFT is 100000 pieces,i.e 100000 * 10^9
int min_txFee()      asm  "130000000 PUSHINT"; 
int one_ton()        asm "1000000000 PUSHINT"; 
int mint_gas()       asm  "120000000 PUSHINT";    


(int, slice,slice, cell, cell,int) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_coins(), ;; total_supply
      ds~load_msg_addr(), ;; admin_address
      ds~load_msg_addr(), ;; nft_collection_address
      ds~load_ref(), ;; content
      ds~load_ref(),  ;; jetton_wallet_code
      ds~load_int(2) ;; mintable, -1:true,0:false
  );
}

() save_data(int total_supply, slice admin_address,slice nft_collection_address, cell content, cell jetton_wallet_code,
            int mintable) impure inline {
  set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_slice(nft_collection_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .store_int(mintable,2)
           .end_cell()
          );
}


() recv_internal(int my_balance,int msg_value, cell in_msg_full, slice in_msg_body) impure { 
    (int total_supply, slice admin_address,slice nft_collection_address, cell content, cell jetton_wallet_code,int mintable) = load_data();
    
    var ctx = var (flags,sender_address,fwd_fee) = load_in_msg_full(in_msg_full);
    if (flags & 1) { ;;ignore  bounced messages
        return ();
    }  

    if (in_msg_body.slice_empty?()) { 
        return ();
    }

    int op = in_msg_body~load_uint(32);

    ;;********begin to handle message
  
    if ( op == op::deployMaster() ){
      int query_id = load_DeployMasterMsg(in_msg_body);
      sendMsg(bounce::true(),sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),
              nft_collection_address,0,
              initCollectionMsg(query_id,my_address(),sender_address));
      return();
    }

    if (op == op::mint()) {
       var (query_id, to_address, jetton_amount) = load_MintMsg(in_msg_body);
        throw_unless(73, equal_slices(sender_address, admin_address));   ;;   exit if not admin_address 
        throw_unless(500, max_supply() >= (total_supply + jetton_amount) ); ;; exit if exceed max supply

        if( max_supply() == (total_supply + jetton_amount) ){
             mintable = 0; ;;reach max_supply ,stop mint new FT
        }

       ;; send internalTransfer message to receiver waller,because not sure user has deployed  wallet,so send message with stat_init
       var (state_init,to_wallet_address)  = getJettonWallet_InitStateAndAddress(to_address,my_address(),jetton_wallet_code,nft_collection_address);
         sendMsgWithInitState(bounce::true(),
                             sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),
                             to_wallet_address,0,
                             internalTransferMsg(query_id,jetton_amount,my_address(),sender_address,0,""),
                             state_init);   
        save_data(total_supply + jetton_amount, admin_address,nft_collection_address, content, jetton_wallet_code,mintable);
        return ();
    }

    throw(0xffff);
    
}

;; get method
(int,int, slice, cell,cell, slice) get_jetton_data() method_id {
    (int total_supply, slice admin_address,slice nft_collection_address, cell content, cell jetton_wallet_code,int mintable) = load_data();
    return (total_supply,mintable, admin_address,content,jetton_wallet_code, ;;Jetton master Standard results
           nft_collection_address);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address,slice nft_collection_address, cell content, cell jetton_wallet_code,int mintable) = load_data();
    var (_, owner_wallet_address)  = getJettonWallet_InitStateAndAddress(owner_address,my_address(),jetton_wallet_code,nft_collection_address);
    return  owner_wallet_address;
}
