#include "./utils/stdlib.fc";
#include "./utils/sendMessage.fc";
#include "./message/common_message.fc";
#include "./message/wallet_message.fc";
#include "./message/nftItem_message.fc";
#include "./message/master_message.fc";
#include "./message/nftCollection_message.fc";
#include "./init/wallet_init.fc";
#include "./init/nftItem_init.fc";
#include "./utils/string.fc";

int min_unit()              asm "1000000000 PUSHINT"; ;; 1 FT
int max_supply()            asm "1000000 PUSHINT";   
int mint_nft_gas()          asm "13000000 PUSHINT";   
int mint_nft_unit_gas()     asm "6100000 PUSHINT";   
int deploy_nft_item_gas()   asm "43000000 PUSHINT"; 

(int,slice,int, cell,cell, cell,cell,int,slice) load_data() inline {
  var ds = get_data().begin_parse();
  var (owner_address,next_item_index,collection_content,nft_item_code, royalty_params,jetton_wallet_code,total_supply) =
        (
         ds~load_msg_addr(), ;; owner_address 
         ds~load_uint(64), ;; next_item_index ,
         ds~load_ref(), ;; collection_content   
         ds~load_ref(), ;; nft_item_code
         ds~load_ref(),  ;; royalty_params  
         ds~load_ref(),  ;; jetton_wallet_code
         ds~load_uint(64) ;; total_supply,ie. current_supply
        );
  if (ds.slice_bits() > 0) {    
      slice master_address = ds~load_msg_addr();
      return (-1, owner_address,next_item_index,collection_content,nft_item_code, royalty_params,jetton_wallet_code,total_supply,master_address);
  } else {  
       return (0, owner_address,next_item_index,collection_content,nft_item_code, royalty_params,jetton_wallet_code,total_supply,null()); 
  }
}

() save_data( slice owner_address,int next_item_index, cell collection_content,cell nft_item_code,cell royalty_params,cell jetton_wallet_code,int total_supply, slice master_address) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)       ;; admin address of trc404 Master and collection contract
    .store_uint(next_item_index, 64)  ;; next_item_index
    .store_ref(collection_content)    ;; collection_content 
    .store_ref(nft_item_code)         ;; nft_item_code
    .store_ref(royalty_params)        ;; royalty_params
    .store_ref(jetton_wallet_code)    ;; jetton_wallet_code
    .store_uint(total_supply, 64)     ;; total_supply
    .store_slice(master_address)      ;; trc404 Master contract
    .end_cell());
}

() recv_internal(int my_balance,int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }  
  var ctx = var (flags,sender_address,fwd_fee) = load_in_msg_full(in_msg_full);
  if (flags & 1) {
    return ();
  }
  int op = in_msg_body~load_uint(32);

  ;;********begin to handle message
  var ( init?,owner_address,next_item_index, collection_content, nft_item_code,royalty_params, jetton_wallet_code,total_supply,master_address) = load_data();
     
  if ( op == op::initCollection()) {
    if (~ init?) {
       var (query_id,init_master_address,response_address) = load_InitCollectionMsg(in_msg_body);
       save_data(owner_address,next_item_index, collection_content, nft_item_code,royalty_params, jetton_wallet_code,total_supply,init_master_address);      
       sendMsg(bounce::false(),sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),response_address,0,excessesMsg(query_id));
      }
    return ();
   }

  if (op == op::get_royalty_params()) {
    int query_id = load_getRoyaltyParamsMsg(in_msg_body);
    sendMsg(bounce::false(),sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),sender_address,0,reportRoyaltyParamsMsg(query_id,royalty_params.begin_parse()));
    return ();
  }

  if (op == op::change_royalty_params()) {
    var (query_id ,new_royalty_params) = load_ChangeRoyaltyParamsMsg(in_msg_body);
    throw_unless(601, equal_slices(sender_address, owner_address));
    sendMsg(bounce::false(),sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),sender_address,0,excessesMsg(1));
    save_data(owner_address,next_item_index, collection_content, nft_item_code,new_royalty_params, jetton_wallet_code,total_supply,master_address);
    return ();
  }
   
  if (op == op::add_nft_supply()) { 
    var (query_id,new_nft_number,nft_represent_ft_amount, owner_address_of_sender_trc404_wallet,response_address ) = load_AddNftSupplyMsg(in_msg_body); 
    throw_unless(602, total_supply + new_nft_number <= max_supply() ); 

    var ( _, sender_trc404_wallet) = getJettonWallet_InitStateAndAddress(owner_address_of_sender_trc404_wallet,master_address,jetton_wallet_code,nft_item_code,my_address());
    throw_unless(603, equal_slices(sender_address, sender_trc404_wallet));

    int total_mint_nft_gas = mint_nft_gas() + (mint_nft_unit_gas() * (new_nft_number - 1)) ;
    int deploy_nft_item_gas = (msg_value - total_mint_nft_gas) / new_nft_number;

    int counter = 0;  
    repeat(new_nft_number){
            counter += 1;   
            int item_index = next_item_index + counter;

            var (state_init,nft_item_address) = getNftItem_InitStateAndAddress(item_index,my_address(),nft_item_code);
            sendMsgWithInitState(bounce::true(),sendMode::NONE(),nft_item_address,deploy_nft_item_gas,deployNftItemMsg(query_id,nft_represent_ft_amount,owner_address_of_sender_trc404_wallet,sender_trc404_wallet,response_address),state_init);  
    }

    next_item_index = next_item_index + new_nft_number;
    total_supply = total_supply + new_nft_number;

    save_data(owner_address,next_item_index, collection_content, nft_item_code,royalty_params, jetton_wallet_code,total_supply,master_address);
    return ();
  }

  if (op == op::reduce_nft_supply()) { 
    var (query_id, burn_item_index, owner_address_of_sender_trc404_wallet,response_address) = load_ReduceNftSupplyMsg(in_msg_body);
    
    throw_unless(604, (total_supply - 1) >= 0 ); 
    var ( _, sender_trc404_wallet) = getJettonWallet_InitStateAndAddress(owner_address_of_sender_trc404_wallet,master_address,jetton_wallet_code,nft_item_code,my_address());
    throw_unless(605, equal_slices(sender_address, sender_trc404_wallet));

    total_supply = total_supply - 1;

    var (_, nft_item_address) = getNftItem_InitStateAndAddress(burn_item_index,my_address(),nft_item_code);         
    sendMsg(bounce::true(),sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),nft_item_address,0,burnNftItemMsg(query_id,owner_address_of_sender_trc404_wallet,sender_trc404_wallet,response_address));   
    save_data(owner_address,next_item_index, collection_content, nft_item_code,royalty_params, jetton_wallet_code,total_supply,master_address);
    return ();
  }
   
  if ( op == op::request_transfer_one_ft_and_nft() ){
    var (query_id, item_index, from_addess, to_address, response_address) = load_RequestTransferOneFtAndNftMsg(in_msg_body);

    var (_, nft_item_contract_address) = getNftItem_InitStateAndAddress(item_index,my_address(),nft_item_code);
    throw_unless(606, equal_slices(sender_address, nft_item_contract_address));

    var (state_init,sender_trc404_wallet) = getJettonWallet_InitStateAndAddress(from_addess,master_address,jetton_wallet_code,nft_item_code,my_address());
    sendMsgWithInitState(bounce::true(),sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),sender_trc404_wallet,0 ,reduceOneFtAndNftMsg(query_id,item_index,to_address,min_unit(),response_address),state_init);   
    return ();
  }
  
  throw(0xffff);
}

;; Get methods
(int, cell, slice) get_collection_data() method_id {
  var (init?,owner_address,next_item_index, collection_content, nft_item_code,royalty_params,jetton_wallet_code,total_supply,master_address) = load_data();
  return (next_item_index, collection_content, owner_address );  
}

(int,slice,int, cell,cell, cell,cell,int,slice) get_full_data() method_id {
      return load_data();
}

slice get_nft_address_by_index(int index) method_id {
  var (init?,owner_address,next_item_index, collection_content , nft_item_code,royalty_params,jetton_wallet_code,total_supply,master_address) = load_data();
  var (_,nft_item_address) = getNftItem_InitStateAndAddress(index,my_address(),nft_item_code);
  return nft_item_address;
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _,_, royalty,_,_,_) = load_data();
     slice rs = royalty.begin_parse();  
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr()); 
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
     return individual_nft_content;
}