;;Trc404 Jetton wallet Contract
#include "./utils/stdlib.fc";
#include "./utils/sendMessage.fc";
#include "./message/common_message.fc";
#include "./message/wallet_message.fc";
#include "./message/nftCollection_message.fc";
#include "./init/wallet_init.fc";
#include "./utils/string.fc";


int min_storageFee() asm "1000000 PUSHINT"; 
int min_unit() asm   "1000000000 PUSHINT"; 

;;for op::transfer()
int basice_transfer_ft_gas_consumption() asm "15000000 PUSHINT"; 
int transfer_one_ft_gas()                 asm "2800000 PUSHINT"; 

;;for op::internal_transfer()
int receive_ft_gas_consumption() asm "19500000 PUSHINT"; 
int notifyTokenFee() asm       "3000000 PUSHINT";  

;;Action Chain fee
int reduce_one_nft_action_fee() asm   "30000000 PUSHINT"; 


(int, slice, slice, cell,slice,cell,int) load_data() inline {
  slice ds = get_data().begin_parse();
  return (   ds~load_coins(),      ;; jetton_balance
            ds~load_msg_addr(),    ;; owner_address
            ds~load_msg_addr(),    ;;jetton_master_address
            ds~load_ref(),        ;; jetton_wallet_code
            ds~load_msg_addr(),   ;;nft_collection_address
            ds~load_dict(),        ;;owned_nft_dict
            ds~load_uint(64)         ;;owned_nft_number
            );
}

() save_data (int jetton_balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code,
  slice nft_collection_address,cell owned_nft_dict,int owned_nft_number) impure inline {
  set_data(begin_cell()
            .store_coins(jetton_balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .store_slice(nft_collection_address)
            .store_dict(owned_nft_dict)
            .store_uint(owned_nft_number,64)
           .end_cell());
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  var (flags,sender_address,fwd_fee) = load_in_msg_full(in_msg_full);
  if (flags & 1) {
    return ();
  }
  int op = in_msg_body~load_uint(32);

  ;;********begin to handle message
  (int jetton_balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, slice nft_collection_address, cell owned_nft_dict, int owned_nft_number) = load_data();
  
   ;;Reserve necessary storage costs
   msg_value =  my_balance -  min_storageFee();

  if (op == op::transfer()) { ;; outgoing transfer
    var (query_id, jetton_amount, to_address, response_address ,custom_payload, forward_ton_amount, forward_payload) = load_transferMsg(in_msg_body);
    
     var new_jetton_balance = jetton_balance - jetton_amount;
     throw_unless(705, equal_slices(owner_address, sender_address) |  equal_slices(nft_collection_address, sender_address));
     throw_unless(706, new_jetton_balance >= 0);

      ;;check if need burn nft 
      int old_nft_balance = jetton_balance / min_unit();
      int new_nft_balance = new_jetton_balance / min_unit();

      int need_to_burn_nft_number = 0;
       if( owned_nft_number > new_nft_balance){
          need_to_burn_nft_number =  owned_nft_number - new_nft_balance;
          owned_nft_number = new_nft_balance;
       }
 
      int total_transfer_ft_gas = basice_transfer_ft_gas_consumption() + (transfer_one_ft_gas() * need_to_burn_nft_number);
      int remain_gas_fee = msg_value - total_transfer_ft_gas ; ;; decrease for contract computation gas 

      throw_unless(37, remain_gas_fee > (reduce_one_nft_action_fee() * need_to_burn_nft_number));
      remain_gas_fee = remain_gas_fee - (reduce_one_nft_action_fee() * need_to_burn_nft_number);   ;; decrease for sending message action  fee
  
      if ( need_to_burn_nft_number > 0 ){
        ;; send reduceOneNft  message to trc404 collection contract address
        repeat( need_to_burn_nft_number ){
          ;; Start burning nft from the smallest item_index     
          (int item_index, slice value, int flag) = owned_nft_dict~udict::delete_get_min(64);
          throw_unless(500, flag);  ;; if can not delete this nft item address, throw error
          
          ;;nft_balance -= 1; 
          sendMsg(bounce::true(),sendMode::NONE(),
                nft_collection_address,reduce_one_nft_action_fee(),
                reduceOneNftMsg(query_id,item_index,owner_address,response_address));
        }      
      } 


     ;; send internalTransfer message to reciver's trc404 wallet contract address,must use sendMsgWithStateInit,because reciver may hasn't initilized  trc404 wallet cotract
     var (state_init, to_trc404_wallet_address) = getJettonWallet_InitStateAndAddress(to_address, jetton_master_address, jetton_wallet_code, nft_collection_address);
    
     sendMsgWithInitState(bounce::true(),sendMode::NONE(),
            to_trc404_wallet_address,remain_gas_fee,
            internalTransferMsg(query_id, jetton_amount, owner_address, response_address, 0, ""),
            state_init);

    save_data(new_jetton_balance, owner_address, jetton_master_address, jetton_wallet_code, nft_collection_address, owned_nft_dict, owned_nft_number);
    return ();
  }

  if (op == op::internal_transfer()) { ;; incoming transfer 
    var (query_id, jetton_amount, from_address, response_address, forward_ton_amount, forward_payload) = load_internalTransferMsg(in_msg_body);

    ;; check message if from master contract or other wallet contract
    var (_, from_wallet_address) = getJettonWallet_InitStateAndAddress(from_address, jetton_master_address, jetton_wallet_code, nft_collection_address);
    throw_unless(707, equal_slices(jetton_master_address, sender_address) | equal_slices(from_wallet_address, sender_address));

    ;;calculate the nft balance need to add 
    int old_nft_balance = jetton_balance / min_unit();
    jetton_balance += jetton_amount;    
    int new_nft_balance = jetton_balance / min_unit();
    int need_to_add_nft_balance = new_nft_balance - old_nft_balance;

    slice receiveFtComment = begin_cell().store_slice("Received ").store_slice(int_to_string(jetton_amount))
                                        .store_slice(" nano TRC404 Token")                                       
                                        .end_cell().begin_parse();  
    sendMsg(bounce::false(),sendMode::NONE(),
            owner_address,notifyTokenFee(),
            commentMsg(receiveFtComment));
    
    msg_value = msg_value - receive_ft_gas_consumption() - notifyTokenFee();

    if (need_to_add_nft_balance > 0) {
       sendMsg(bounce::true(),sendMode::NONE(),
               nft_collection_address,msg_value,
               addNftSupplyMsg(query_id,owned_nft_number,need_to_add_nft_balance,owner_address,response_address));   
    } else {
      sendMsg(bounce::false(),sendMode::NONE(),
              response_address,msg_value,
              excessesMsg(query_id));
    }
     
    save_data(jetton_balance, owner_address, jetton_master_address, jetton_wallet_code,nft_collection_address,owned_nft_dict,owned_nft_number);
    return ();
  }

  if (op == op::add_nft_list()) {
     var (query_id, begin_index,new_nft_number, response_destination) = load_addNftListMsg(in_msg_body);

     throw_unless(708, equal_slices(nft_collection_address, sender_address));

    int counter = 0;  
      repeat(new_nft_number){
       counter += 1;   
       int item_index = begin_index + counter;
       owned_nft_dict~udict_set(64,item_index, ""); 
      }
    
    owned_nft_number = owned_nft_number + new_nft_number;
    sendMsg(bounce::false(),sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),
          response_destination,0,
          excessesMsg(query_id));
    
    save_data(jetton_balance, owner_address, jetton_master_address, jetton_wallet_code,nft_collection_address,owned_nft_dict,owned_nft_number);
    return();
  } 

  if (op == op::add_one_ft_and_nft()) { 
    var (query_id, item_index,  response_destination) = load_addOneFtAndNftMsg(in_msg_body);
     
     jetton_balance = jetton_balance + min_unit() ;   
     ;;add nft item_index to owned_nft_dict
     owned_nft_dict~udict_set(64,item_index, ""); ;;store nft-item index as key,and "" as value
    
     ;; check message if from collection address and jetton balance >0
     throw_unless(708, equal_slices(nft_collection_address, sender_address));
     throw_unless(709, jetton_balance >= 0);

     owned_nft_number = owned_nft_number + 1 ;

    ;; send remain value to respnse_address                                
     sendMsg(bounce::false(),sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),
          response_destination,0,
          excessesMsg(query_id));
    
    save_data(jetton_balance, owner_address, jetton_master_address, jetton_wallet_code,nft_collection_address,owned_nft_dict,owned_nft_number);
    return();
  }

  if (op == op::reduce_one_ft_and_nft()) { 
    var (query_id,item_index,  response_destination) = load_reduceOneFtAndNftMsg(in_msg_body);

    jetton_balance = jetton_balance - min_unit();

    ;; check message if from collection address and jetton balance >0
    throw_unless(708, equal_slices(nft_collection_address, sender_address));
    throw_unless(709, jetton_balance >= 0);

    ;; delete the minium nft item_index
    (slice value, int flag) = owned_nft_dict~udict_delete_get?(64, item_index);

    throw_unless(500 ,flag);       ;;if can not get and delete this nft item address, throw error
     
    owned_nft_number = owned_nft_number - 1;
    ;;always send excess message to responese client wallet
    sendMsg(bounce::false(),sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),
          response_destination, 0, excessesMsg(query_id));
    
    save_data(jetton_balance, owner_address, jetton_master_address, jetton_wallet_code, nft_collection_address, owned_nft_dict, owned_nft_number);
    return();
  }

  throw(0xffff);
}

(int, slice, slice, cell, slice, cell, int) get_wallet_data() method_id {
  return load_data();
}
