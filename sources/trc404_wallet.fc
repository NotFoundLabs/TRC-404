#include "./utils/stdlib.fc";
#include "./utils/const.fc";
#include "./utils/sendMessage.fc";
#include "./message/common_message.fc";
#include "./message/master_message.fc";
#include "./message/wallet_message.fc";
#include "./message/nftCollection_message.fc";
#include "./init/wallet_init.fc";
#include "./init/nftItem_init.fc";


int min_storageFee()                     asm "10000000 PUSHINT";   ;; 0.01 TON
int min_unit()                           asm "1000000000 PUSHINT"; ;; 1 FT
int basice_transfer_ft_gas_consumption() asm "18000000 PUSHINT";
int transfer_one_ft_gas()                asm "5000000 PUSHINT";
int reduce_nft_supply_fee()              asm "38000000 PUSHINT";
int transfer_nft_burn_nft_fee()          asm "38000000 PUSHINT";
int add_one_ft_and_nft_gas()             asm "17600000 PUSHINT";
int receive_ft_gas_consumption()         asm "2000000 PUSHINT";
int need_add_nft_supply_action_fee()     asm "15300000 PUSHINT";
int no_need_add_nft_supply_action_fee()  asm "14800000 PUSHINT";



global int   Storage::Jetton_balance;
global slice Storage::Owner_address;
global slice Storage::Jetton_master_address;
global cell  Storage::Jetton_wallet_code;
global cell  Storage::Nft_item_code;
global slice Storage::Nft_collection_address;
global cell  Storage::Owned_nft_dict;
global int   Storage::Owned_nft_number;
global int   Storage::Owned_nft_limit;
global int   Storage::Pending_reduce_jetton_balance;
global cell  Storage::Pending_transfer_nft_queue;

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    Storage::Jetton_balance = ds~load_coins();                         
    Storage::Owner_address = ds~load_msg_addr();                        
    Storage::Jetton_master_address = ds~load_msg_addr();               
    Storage::Jetton_wallet_code = ds~load_ref();                        
    Storage::Nft_item_code = ds~load_ref();                             
    Storage::Nft_collection_address = ds~load_msg_addr();               
    Storage::Owned_nft_dict = ds~load_dict();                           
    Storage::Owned_nft_number = ds~load_int(item_index_length() + 1);   ;;owned_nft_numberï¼Œallow negative number, 
    Storage::Owned_nft_limit = ds~load_uint(item_index_length());       
    Storage::Pending_reduce_jetton_balance = ds~load_coins();           
    Storage::Pending_transfer_nft_queue = ds~load_dict();               

}

() save_data() impure inline {
    set_data(begin_cell()
        .store_coins(Storage::Jetton_balance)
        .store_slice(Storage::Owner_address)
        .store_slice(Storage::Jetton_master_address)
        .store_ref(Storage::Jetton_wallet_code)
        .store_ref(Storage::Nft_item_code)
        .store_slice(Storage::Nft_collection_address)
        .store_dict(Storage::Owned_nft_dict)
        .store_int(Storage::Owned_nft_number, item_index_length() + 1)
        .store_uint(Storage::Owned_nft_limit, item_index_length())
        .store_coins(Storage::Pending_reduce_jetton_balance)
        .store_dict(Storage::Pending_transfer_nft_queue)
        .end_cell());
}

() core_internal_transfer(int msg_value, int query_id, int jetton_amount, slice from_address, slice response_address, int forward_ton_amount, slice forward_payload,int my_balance,int fwd_fee) impure inline_ref {
    var old_jetton_balance = Storage::Jetton_balance;
    int old_nft_balance = old_jetton_balance / min_unit();
    int new_jetton_balance = Storage::Jetton_balance + jetton_amount;
    int new_nft_balance = new_jetton_balance / min_unit();
    int need_to_add_nft_number = new_nft_balance - old_nft_balance;

    if (Storage::Owned_nft_number >= Storage::Owned_nft_limit) {
        need_to_add_nft_number = 0;
    } else {
        if ((Storage::Owned_nft_number + need_to_add_nft_number) >= Storage::Owned_nft_limit) {
            need_to_add_nft_number = Storage::Owned_nft_limit - Storage::Owned_nft_number;
        }
    }

    if (need_to_add_nft_number <= 0) {
        Storage::Jetton_balance = new_jetton_balance;
    } else {
        ;;Notice:jetton_balance amount might less than original jetton_balance  amount
        Storage::Jetton_balance = new_jetton_balance - need_to_add_nft_number * min_unit(); 
    }

    throw_unless(710, Storage::Jetton_balance >= 0);

    int ton_balance_before_msg = my_balance - msg_value;
    int storage_fee = min_storageFee() - min(ton_balance_before_msg, min_storageFee());
    msg_value -= storage_fee ;

    if (forward_ton_amount > 0) {
        msg_value -= (forward_ton_amount + fwd_fee);
        sendMsg(bounce::false(), sendMode::PAY_GAS_SEPARATELY(), Storage::Owner_address, forward_ton_amount, transferNotificationMsg(query_id, jetton_amount, from_address, forward_payload));
    }

    if (need_to_add_nft_number > 0) {
        msg_value = msg_value - need_add_nft_supply_action_fee();
        sendMsg(bounce::true(), sendMode::NONE(), Storage::Nft_collection_address, msg_value, addNftSupplyMsg(query_id, need_to_add_nft_number, min_unit(), Storage::Owner_address, response_address));
    } else {
        msg_value = msg_value - no_need_add_nft_supply_action_fee();
        sendMsg(bounce::false(), sendMode::NONE(), response_address, msg_value, excessesMsg(query_id));
    }

    save_data();
}

() updateOwnedNftNumberAndJettonBalance(int msg_value, int nft_represent_ft_amount, slice to_address, int query_id, int item_index, slice response_address) impure inline_ref {
    Storage::Owned_nft_number = Storage::Owned_nft_number - 1;
    ;;try to reduce jetton_balance, if result is negative , add Pending_reduce_jetton_balance by nft_represent_ft_amount
    int result = Storage::Jetton_balance - nft_represent_ft_amount;
    if (result < 0) {
        Storage::Pending_reduce_jetton_balance = Storage::Pending_reduce_jetton_balance + abs(result);
        Storage::Jetton_balance = 0;
    } else {
        Storage::Jetton_balance = Storage::Jetton_balance - nft_represent_ft_amount;
    }

    var (state_init, receiver_trc404_wallet) = getJettonWallet_InitStateAndAddress(to_address, Storage::Jetton_master_address, Storage::Jetton_wallet_code, Storage::Nft_item_code, Storage::Nft_collection_address);
    sendMsgWithInitState(bounce::true(), sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(), receiver_trc404_wallet, 0, addOneFtAndNftMsg(query_id, item_index, nft_represent_ft_amount, Storage::Owner_address, response_address), state_init);
    save_data();
}

() on_bounce (slice in_msg_body) impure {
  in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
  load_data();
  int op = in_msg_body~load_uint(32);
  throw_unless(709, op == op::internal_transfer());
  int query_id = in_msg_body~load_uint(64);
  int jetton_amount = in_msg_body~load_coins();
  Storage::Jetton_balance += jetton_amount;
  save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    var (flags, sender_address, fwd_fee) = load_in_msg_full(in_msg_full);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    int op = in_msg_body~load_uint(32);

    ;;********begin to handle message
    load_data();
    ;;msg_value = msg_value - min_storageFee();

    if (op == op::transfer()) {
        var (query_id, jetton_amount, to_address, response_address, custom_payload, forward_ton_amount, forward_payload) = load_transferMsg(in_msg_body);

        var old_jetton_balance = Storage::Jetton_balance;
        int new_jettton_balance = Storage::Jetton_balance - jetton_amount;
        throw_unless(705, equal_slices(Storage::Owner_address, sender_address) | equal_slices(Storage::Nft_collection_address, sender_address));
        throw_unless(706, new_jettton_balance >= 0);

        int old_nft_balance = old_jetton_balance / min_unit();
        int new_nft_balance = new_jettton_balance / min_unit();

        int need_to_burn_nft_number = 0;
        if (Storage::Owned_nft_number > new_nft_balance) {
            need_to_burn_nft_number = Storage::Owned_nft_number - new_nft_balance;
            Storage::Owned_nft_number = new_nft_balance;
        }

        int total_burn_nft_gas = (reduce_nft_supply_fee() ) * (need_to_burn_nft_number);
        msg_value = msg_value - total_burn_nft_gas;
        throw_unless(37, msg_value > 0);

        Storage::Jetton_balance = new_jettton_balance;

        int total_transfer_ft_gas = basice_transfer_ft_gas_consumption() + (transfer_one_ft_gas() * need_to_burn_nft_number);
        int remain_gas_fee = msg_value - total_transfer_ft_gas;

        if (need_to_burn_nft_number > 0) {
            int miniKey = 0;
            repeat( need_to_burn_nft_number ){  
                int flag = 0;    
                ;;find a min NFT index with normal status     
                do {           
                   (int item_index,slice value,flag) =  Storage::Owned_nft_dict.udict_get_next?(64,miniKey); 
                   miniKey = item_index;                 
                } until (  ~ equal_slices(value,"0") | ~ flag) ;
              
                if ( flag ){  
                 Storage::Owned_nft_dict~udict_set(64,miniKey, "0"); ;; "0" means pending delete,"" means normal         
                 sendMsg(bounce::true(),sendMode::NONE(),Storage::Nft_collection_address,reduce_nft_supply_fee() ,
                        reduceNftSupplyMsg(query_id,miniKey,Storage::Owner_address,response_address));
                } 
            }
        }

        var (state_init, to_trc404_wallet_address) = getJettonWallet_InitStateAndAddress(to_address, Storage::Jetton_master_address, Storage::Jetton_wallet_code, Storage::Nft_item_code, Storage::Nft_collection_address);
        sendMsgWithInitState(bounce::true(), sendMode::NONE(), to_trc404_wallet_address, remain_gas_fee, internalTransferMsg(query_id, jetton_amount, Storage::Owner_address, response_address, forward_ton_amount, forward_payload), state_init);

        save_data();
        return ();
    }

    if (op == op::internal_transfer()) {
        var (query_id, jetton_amount, from_address, response_address, forward_ton_amount, forward_payload) = load_internalTransferMsg(in_msg_body);

        if (jetton_amount == 0) {
            sendMsg(bounce::false(), sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),response_address, 0, excessesMsg(query_id));
            return ();
        }

        var (_, from_wallet_address) = getJettonWallet_InitStateAndAddress(from_address, Storage::Jetton_master_address, Storage::Jetton_wallet_code, Storage::Nft_item_code, Storage::Nft_collection_address);
        throw_unless(707, equal_slices(Storage::Jetton_master_address, sender_address) | equal_slices(from_wallet_address, sender_address));

        msg_value = msg_value - receive_ft_gas_consumption();
        core_internal_transfer(msg_value, query_id, jetton_amount, from_address, response_address, forward_ton_amount, forward_payload,my_balance,fwd_fee);
        return ();
    }

    if (op == op::cb_burn_nft()) {
        var (query_id, item_index, responese_address) = load_cbBurnNftMsg(in_msg_body);

        var (_, nft_item_address) = getNftItem_InitStateAndAddress(item_index, Storage::Nft_collection_address, Storage::Nft_item_code);
        throw_unless(708, equal_slices(nft_item_address, sender_address)); 

        (slice value, int flag) = Storage::Owned_nft_dict~udict_delete_get?(64, item_index);

        sendMsg(bounce::false(), sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(), responese_address, 0, excessesMsg(query_id));save_data();
        return ();
    }

    if (op == op::add_one_ft_and_nft()) {
        var (query_id, item_index, nft_represent_ft_amount, old_owner_address, response_destination) = load_addOneFtAndNftMsg(in_msg_body);

        var (_, nft_item_address) = getNftItem_InitStateAndAddress(item_index, Storage::Nft_collection_address, Storage::Nft_item_code);
        var (_, from_wallet_address) = getJettonWallet_InitStateAndAddress(old_owner_address, Storage::Jetton_master_address, Storage::Jetton_wallet_code, Storage::Nft_item_code, Storage::Nft_collection_address);
        throw_unless(709, equal_slices(nft_item_address, sender_address) | equal_slices(from_wallet_address, sender_address));

        (slice value, int flag) = Storage::Pending_transfer_nft_queue~udict_delete_get?(64, item_index);
        if (~ flag) {
            if (Storage::Owned_nft_number < Storage::Owned_nft_limit) {
                Storage::Owned_nft_dict~udict_set(64, item_index, ""); ;;store nft-item index as key,and ""(normal status) as value
                Storage::Owned_nft_number = Storage::Owned_nft_number + 1;
            } else {
                msg_value = msg_value - transfer_nft_burn_nft_fee();
                Storage::Owned_nft_dict~udict_set(64,item_index, "0"); ;;set this item_index's status to "0"(pending_delete)
                sendMsg(bounce::true(), sendMode::NONE(), Storage::Nft_collection_address, transfer_nft_burn_nft_fee(), reduceNftSupplyMsg(query_id, item_index, Storage::Owner_address, response_destination));
            }
        } else {
            if (Storage::Owned_nft_number < Storage::Owned_nft_limit) {
                Storage::Owned_nft_number = Storage::Owned_nft_number + 1;
            }
        }

        int add_number = Storage::Jetton_balance + nft_represent_ft_amount;
        if (add_number >= Storage::Pending_reduce_jetton_balance) {
            Storage::Jetton_balance = add_number - Storage::Pending_reduce_jetton_balance;
            Storage::Pending_reduce_jetton_balance = 0;
            throw_unless(710, Storage::Jetton_balance >= 0);
        }  else {
            Storage::Pending_reduce_jetton_balance = Storage::Pending_reduce_jetton_balance - add_number;
            Storage::Jetton_balance = 0;
        }

        msg_value = msg_value - add_one_ft_and_nft_gas();
        sendMsg(bounce::false(), sendMode::NONE(), response_destination, msg_value, excessesMsg(query_id));

        save_data();
        return ();
    }

    if (op == op::reduce_one_ft_and_nft()) {
        var (query_id, item_index, to_address, reduce_and_add_amount, response_destination) = load_reduceOneFtAndNftMsg(in_msg_body);

        throw_unless(711, equal_slices(Storage::Nft_collection_address, sender_address));

        (slice value, int flag) = Storage::Owned_nft_dict.udict_get?(64, item_index);

        if (flag == 0) {
            Storage::Pending_transfer_nft_queue~udict_set(64, item_index, ""); 
            updateOwnedNftNumberAndJettonBalance(msg_value, reduce_and_add_amount, to_address, query_id, item_index, response_destination);
        } else {
            if (~ value.slice_empty?() & equal_slices(value, "0")) {
                sendMsg(bounce::false(), sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(),
                    response_destination, 0,
                    commentMsg("This NFT has been burned"));
            } else {
                (slice value2, int flag2) = Storage::Owned_nft_dict~udict_delete_get?(64, item_index);
                throw_unless(505, flag2);
                updateOwnedNftNumberAndJettonBalance(msg_value, reduce_and_add_amount, to_address, query_id, item_index, response_destination);
            }
        }

        return ();
    }

    if (op == op::change_owned_nft_limit()) {
        (int query_id, int new_owned_nft_limit) = load_ChangeOwnedNftLimitMsg(in_msg_body);
        throw_unless(712, equal_slices(sender_address, Storage::Owner_address));
        throw_unless(713, new_owned_nft_limit <= owned_nft_limit());
        Storage::Owned_nft_limit = new_owned_nft_limit;
        sendMsg(bounce::false(), sendMode::CARRY_ALL_REMAINING_INCOMING_VALUE(), sender_address, 0, excessesMsg(query_id));
        save_data();
        return ();
    }

    throw(0xffff);
}

(int, slice, slice, cell) get_wallet_data() method_id {
    slice ds = get_data().begin_parse();
    return (ds~load_coins(),                       ;;jetton_balance
            ds~load_msg_addr(),                    ;;owner_address
            ds~load_msg_addr(),                    ;;jetton_master_address
            ds~load_ref());                        ;;jetton_wallet_code
    
}

(int, slice, slice, cell, cell, slice, cell, int, int, int, cell) get_404_wallet_data() method_id {
    slice ds = get_data().begin_parse();
    return (ds~load_coins(),                       ;;jetton_balance
            ds~load_msg_addr(),                    ;;owner_address
            ds~load_msg_addr(),                    ;;jetton_master_address
            ds~load_ref(),                         ;;jetton_wallet_code
            ds~load_ref(),                         ;;nft_item_code
            ds~load_msg_addr(),                    ;;nft_collection_address
            ds~load_dict(),                        ;;owned_nft_dict
            ds~load_int(item_index_length() + 1),  ;;owned_nft_number
            ds~load_uint(item_index_length()),     ;;owned_nft_limit
            ds~load_coins(),                       ;;pending_reduce_ jetton_balance
            ds~load_dict());                       ;;Pending_transfer_nft_queue
}
